<?xml version="1.0" ?>
<project name="FileManager" default="debug">

	<!-- private build properties are not shared via svn, 
	developers must have there own copy with the following entries
proguard.jar=d:\\extern\\proguard4.2\\proguard4.2\\lib\\proguard.jar
storepass=*password of keystore*
-->	 
	<property file="build-private.properties" />

	<!-- Read properties from OpenIntents property file -->
	<property file="build.properties" />
	<!-- <property file="${build.properties.dir}/build.properties" /> -->
	
<!-- 1.5 Changes START -->
    <!-- Custom Android task to deal with the project target, and import the proper rules.
         This requires ant 1.6.0 or above. -->
    <path id="android.antlibs">
        <pathelement path="${sdk-location}/tools/lib/anttasks.jar" />
        <pathelement path="${sdk-location}/tools/lib/sdklib.jar" />
        <pathelement path="${sdk-location}/tools/lib/androidprefs.jar" />
        <pathelement path="${sdk-location}/tools/lib/apkbuilder.jar" />
        <pathelement path="${sdk-location}/tools/lib/jarutils.jar" />
    </path>

<!-- 1.5 Changes END -->

	<!-- Read manifest properties , e.g. manifest(android:versionName) or manifest.package -->
	<xmlproperty file="AndroidManifest.xml" />

	<!-- Path to Android SDK and tools -->
	<property name="sdk-folder" value="${android.sdk}/platforms/${platform}" />
	<property name="platform-tools" value="${sdk-folder}/tools" />
	<property name="android-tools" value="${android.sdk}/tools" />
	<echo>Using Android SDK directory ${sdk-folder}</echo>
	
	<!-- Application Package Name -->
	<property name="application-package" value="${manifest(package)}" />
	<property name="version" value="${manifest(android:versionName)}" />

    <!-- The intermediates directory -->
    <!-- Eclipse uses "bin" for its own output, so we do the same. -->
    <property name="outdir" value="bin" />
	
	<!-- OpenIntents library file -->
	<property name="openintents-lib-jar" value="lib/openintents-lib.jar" />

    <!-- No user servicable parts below. -->

	<property name="android-framework" value="${sdk-location}/platforms/${platform}/framework.aidl" />

	<!-- Input directories -->
    <property name="resource-dir" value="res" />
    <property name="asset-dir" value="assets" />
    <property name="srcdir" value="src" />
	<condition property="srcdir-ospath"
	        value="${basedir}\${srcdir}"
	        else="${basedir}/${srcdir}" >
	    <os family="windows"/>
	</condition>

	<property name="external-libs" value="lib" />
	<condition property="external-libs-ospath"
	        value="${basedir}\${external-libs}"
	        else="${basedir}/${external-libs}" >
	    <os family="windows"/>
	</condition>
	
    <!-- Output directories -->
    <property name="outdir-classes" value="${outdir}/classes" />
	<condition property="outdir-classes-ospath"
	        value="${basedir}\${outdir-classes}"
	        else="${basedir}/${outdir-classes}" >
	    <os family="windows"/>
	</condition>
		
	<property name="docdir" value="doc" />
	<property name="releasedir" value="release" />
    
    <!-- Create R.java in the source directory -->
    <property name="outdir-r" value="gen" />

    <!-- Intermediate files -->
    <property name="dex-file" value="classes.dex" />
    <property name="intermediate-dex" value="${outdir}/${dex-file}" />
    <condition property="intermediate-dex-ospath"
            value="${basedir}\${intermediate-dex}"
            else="${basedir}/${intermediate-dex}" >
        <os family="windows"/>
    </condition>

    <!-- The final package file to generate -->
    <property name="resources-package" value="${outdir}/${ant.project.name}.ap_" />
    <condition property="resources-package-ospath"
            value="${basedir}\${resources-package}"
            else="${basedir}/${resources-package}" >
        <os family="windows"/>
    </condition>

    <property name="out-debug-package" value="${outdir}/${ant.project.name}.apk" />
    <condition property="out-debug-package-ospath"
            value="${basedir}\${out-debug-package}"
            else="${basedir}/${out-debug-package}" >
        <os family="windows"/>
    </condition>

    <property name="out-unsigned-package" value="${outdir}/${ant.project.name}-unsigned.apk" />
    <condition property="out-unsigned-package-ospath"
            value="${basedir}\${out-unsigned-package}"
            else="${basedir}/${out-unsigned-package}" >
        <os family="windows"/>
    </condition>
	
	<property name="out-signed-package" value="${outdir}/${ant.project.name}-signed.apk" />
	<condition property="out-signed-package-ospath"
	            value="${basedir}\${out-signed-package}"
	            else="${basedir}/${out-signed-package}" >
	        <os family="windows"/>
	</condition>
	<property name="out-aligned-package-file" value="${ant.project.name}-${version}.apk" />
	<property name="out-aligned-package" value="${outdir}/${out-aligned-package-file}" />
	<condition property="out-aligned-package-ospath"
	            value="${basedir}\${out-aligned-package}"
	            else="${basedir}/${out-aligned-package}" >
	        <os family="windows"/>
	</condition>

	<property name="out-release-source" value="${releasedir}/${ant.project.name}-source-${version}" />
	<condition property="out-release-source-ospath"
	            value="${basedir}\${out-release-source}"
	            else="${basedir}/${out-release-source}" >
	        <os family="windows"/>
	</condition>
	
    <!-- Tools -->
    <condition property="aapt" value="${platform-tools}/aapt.exe" else="${platform-tools}/aapt" >
        <os family="windows"/>
    </condition>
    <condition property="aidl" value="${platform-tools}/aidl.exe" else="${platform-tools}/aidl" >
        <os family="windows"/>
    </condition>
    <condition property="adb" value="${android-tools}/adb.exe" else="${android-tools}/adb" >
        <os family="windows"/>
    </condition>
    <condition property="dx" value="${platform-tools}/dx.bat" else="${platform-tools}/dx" >
        <os family="windows"/>
    </condition>
    <condition property="apk-builder" value="${android-tools}/apkbuilder.bat" else="${android-tools}/apkbuilder" >
        <os family="windows"/>
    </condition>
    <condition property="zipalign" value="${android-tools}/zipalign.exe" else="${android-tools}/zipalign" >
        <os family="windows"/>
    </condition>
    
	
	<condition property="apk-builder" value="${android-tools}/apkbuilder.bat" else="${android-tools}/apkbuilder" >
	       <os family="windows"/>
	</condition>


	<condition property="android-jar" 
		value="${sdk-folder}\android.jar" 
		else="${sdk-folder}/android.jar" >
		<os family="windows"/>
	</condition>

    <!-- Rules -->
    <!-- Custom tasks -->
<!-- 1.5 Changes START -->
   <taskdef name="setup"
        classname="com.android.ant.SetupTask"
        classpathref="android.antlibs"/>
	<setup import="false" />

    <taskdef name="aaptexec"
        classname="com.android.ant.AaptExecLoopTask"
        classpathref="android.antlibs"/>

    <taskdef name="apkbuilder"
        classname="com.android.ant.ApkBuilderTask"
        classpathref="android.antlibs"/>
		
<!-- 1.5 Changes END -->


		<!-- Create the output directories if they don't exist yet. -->
    <target name="dirs">
        <mkdir dir="${outdir}" />
    	<delete dir="${outdir-classes}"/>
        <mkdir dir="${outdir-classes}" />
    </target>

	<target name="clear_layout">
		<echo>purging .bak files </echo>
		<delete>
			<fileset dir="." includes="**/*.bak"/>
		</delete>
	</target>
	
    <!-- Generate the R.java file for this project's resources. -->
    <target name="resource-src" depends="dirs">
        <echo>Generating R.java / Manifest.java from the resources...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-m" />
            <arg value="-J" />
            <arg value="${outdir-r}" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
        </exec>
    </target>

    <!-- Generate java classes from .aidl files. -->
    <target name="aidl" depends="dirs">
        <echo>Compiling aidl files into Java classes...</echo>
        <apply executable="${aidl}" failonerror="true">
            <arg value="-p${android-framework}" />
           <arg value="-I${srcdir}" />
            <arg value="-o${outdir-r}" />
            <fileset dir="${srcdir}">
                <include name="**/*.aidl"/>
            </fileset>
        </apply>
    </target>

    <!-- Compile this project's .java files into .class files. -->
    <target name="compile" depends="dirs,clear_layout, resource-src, aidl">
		<echo>using sdk --|${android-jar}|--</echo>
		
        <javac encoding="ascii" target="1.5" debug="true" extdirs=""
                
                destdir="${outdir-classes}"
                bootclasspath="${android-jar}">
        	<src path="."/>
        	<src path="./gen"/>
            <classpath>
                <fileset dir="${external-libs}" includes="*.jar"/>
            </classpath>
         </javac>
    </target>
	


	  <target name="optimize" depends="compile"> <!-- unless="debug" -->
	  	<mkdir dir="tmp" />
	  	<jar basedir="${outdir-classes}" destfile="tmp/temp.jar"/>
	    <java jar="${proguard.jar}" fork="true" failonerror="true">
	     <!-- <jvmarg value="-Dmaximum.inlined.code.length=32"/> -->
	     <arg value="-injars tmp/temp.jar"/>
	     <arg value="-outjars tmp/optimized.jar"/>
	     <arg value="-libraryjars '${android-jar}'"/>
	     <!-- <arg value="-dontpreverify"/> -->
	     <!-- <arg value="-dontobfuscate"/> -->
	     <arg value="-printmapping tmp/obfuscated.txt"/>
	     <arg value="-printusage tmp/obfuscated_deadcode.txt"/>
	     <arg value="-dontusemixedcaseclassnames"/>
	     <arg value="-dontoptimize"/>
	     <arg value="-dontshrink"/>
	     <arg value="-keep public class org.openintents.flashlight.ColorPickerActivity"/>
	     <arg value="-keep public class org.openintents.flashlight.Flashlight"/>
	     <arg value="-keep public class android.content.BroadcastReceiver"/>
	     <arg value="-keep public class org.openintents.widget.ColorCircle"/>
	     <arg value="-keep public class org.openintents.widget.ColorSlider"/>
		 <arg value="-keep public class org.openintents.distribution.EulaActivity"/>
		 <arg value="-keep public class org.openintents.distribution.AboutActivity"/>
	    	 <!-- <arg value="-keep public class org.openintents.splashplay.widget.LazyLinearLayout {
	    	 	public LazyLinearLayout(android.content.Context,android.util.AttributeSet);
	    		 public LazyLinearLayout(android.content.Context);
	    		 }" /> -->
	    	 	
	     <!-- <arg value="-optimizationpasses 7"/> -->
	     <!-- <arg value="-overloadaggressively"/> -->
	     <arg value="-verbose"/>
	   </java>
	   <delete file="tmp/temp.jar"/>
	   <delete dir="${outdir-classes}"/>
	   <mkdir dir="${outdir-classes}"/>
	   <unzip src="tmp/optimized.jar" dest="${outdir-classes}"/>
	   <delete file="tmp/optimized.jar"/>
	  </target>


    <!-- Convert this project's .class files into .dex files. currently no optimization add >>,optimize<< to depends attr -->
    <target name="dex" depends="compile">
        <echo>Converting compiled files and external libraries into ${outdir}/${dex-file}...</echo>
        <apply executable="${dx}" failonerror="true" parallel="true">
            <arg value="--dex" />
            <arg value="--output=${intermediate-dex-ospath}" />
            <arg path="${outdir-classes-ospath}" />
            <fileset dir="${external-libs}" includes="*.jar"/>
        </apply>
    </target>

    <!-- Convert this project's .class files into .dex files. -->
    <target name="dex-debug" depends="compile">
        <echo>Converting compiled files and external libraries into ${outdir}/${dex-file}...</echo>
        <apply executable="${dx}" failonerror="true" parallel="true">
            <arg value="--dex" />
            <arg value="--output=${intermediate-dex-ospath}" />
            <arg path="${outdir-classes-ospath}" />
            <fileset dir="${external-libs}" includes="*.jar"/>
        </apply>
    </target>

    <!-- Put the project's resources into the output package file. -->
    <target name="package-res-and-assets">
        <echo>Packaging resources and assets...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <arg value="-A" />
            <arg value="${asset-dir}" />
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="-F" />
            <arg value="${resources-package}" />
        </exec>
    </target>

    <!-- Same as package-res-and-assets, but without "-A ${asset-dir}" -->
    <target name="package-res-no-assets">
        <echo>Packaging resources...</echo>
        <exec executable="${aapt}" failonerror="true">
            <arg value="package" />
            <arg value="-f" />
            <arg value="-M" />
            <arg value="AndroidManifest.xml" />
            <arg value="-S" />
            <arg value="${resource-dir}" />
            <!-- No assets directory -->
            <arg value="-I" />
            <arg value="${android-jar}" />
            <arg value="-F" />
            <arg value="${resources-package}" />
        </exec>
    </target>

    <!-- Invoke the proper target depending on whether or not
         an assets directory is present. -->
    <!-- TODO: find a nicer way to include the "-A ${asset-dir}" argument
         only when the assets dir exists. -->
    <target name="package-res">
        <available file="${asset-dir}" type="dir"
                property="res-target" value="and-assets" />
        <property name="res-target" value="no-assets" />
        <antcall target="package-res-${res-target}" />
    </target>

    <!-- Package the application and sign it with a debug key.
		 This is the default target when building. It is used for debug. -->
    <target name="debug" depends="dex-debug, package-res">
        <echo>Packaging ${out-debug-package}, and signing it with a debug key...</echo>
        <exec executable="${apk-builder}" failonerror="true">
            <arg value="${out-debug-package-ospath}" />
            <arg value="-z" />
            <arg value="${resources-package-ospath}" />
            <arg value="-f" />
            <arg value="${intermediate-dex-ospath}" />
            <arg value="-rf" />
            <arg value="${srcdir-ospath}" />
            <arg value="-rj" />
            <arg value="${external-libs-ospath}" />
        </exec>
    </target>

    <!-- Package the application without signing it.
    	 This allows for the application to be signed later with an official publishing key. -->
    <target name="release" depends="dex-debug, package-res">
        <echo>Packaging ${out-unsigned-package} for release...</echo>
        <exec executable="${apk-builder}" failonerror="true">
            <arg value="${out-unsigned-package-ospath}" />
            <arg value="-u" />
            <arg value="-z" />
            <arg value="${resources-package-ospath}" />
            <arg value="-f" />
            <arg value="${intermediate-dex-ospath}" />
            <arg value="-rf" />
            <arg value="${srcdir-ospath}" />
            <arg value="-rj" />
            <arg value="${external-libs-ospath}" />
        </exec>
    	<signjar jar="${out-unsigned-package-ospath}" alias="${cert-alias}" keystore="${keystore}" storepass="${storepass}" keypass="${keypass}" signedjar="${out-signed-package-ospath}"/>
        <exec executable="${zipalign}" failonerror="true">
            <arg value="-f" />
            <arg value="4" />
            <arg value="${out-signed-package-ospath}" />
            <arg value="${out-aligned-package-ospath}" />
        </exec>
    	
    </target>

    <!-- Install the package on the default emulator -->
    <target name="install" depends="debug">
        <echo>Installing ${out-debug-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg value="${out-debug-package}" />
        </exec>
    </target>

    <target name="reinstall" depends="debug">
        <echo>Installing ${out-debug-package} onto default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="install" />
            <arg value="-r" />
            <arg value="${out-debug-package}" />
        </exec>
    </target>
	
	<!-- Install the signed package on the default emulator -->
	<target name="install-signed" depends="release">
		<echo>Installing ${out-aligned-package} onto default emulator...</echo>
		<exec executable="${adb}" failonerror="true">
			<arg value="install" />
			<arg value="${out-aligned-package}" />
		</exec>
	</target>

	<target name="reinstall-signed" depends="release">
		<echo>Reinstalling ${out-aligned-package} onto default emulator...</echo>
		<exec executable="${adb}" failonerror="true">
			<arg value="install" />
			<arg value="-r" />
			<arg value="${out-aligned-package}" />
		</exec>
	</target>

    <!-- Uinstall the package from the default emulator -->
    <target name="uninstall">
        <echo>Uninstalling ${application-package} from the default emulator...</echo>
        <exec executable="${adb}" failonerror="true">
            <arg value="uninstall" />
            <arg value="${application-package}" />
        </exec>
    </target>
	

	<!-- ############### JavaDoc ####################### -->
	<!-- Create JavaDoc -->
	<target name="javadoc">
		<delete dir="${docdir}" />
		<javadoc access="public" author="true" destdir="${docdir}" 
        	nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" 
        	source="1.6" sourcepath="${srcdir}" splitindex="true" use="true" version="true">
        </javadoc>
    </target>

	<!-- ############### Release source ####################### -->
	<!-- Copy to source release -->
	<target name="release-source">
    	<delete dir="${releasedir}"/>
        <mkdir dir="${releasedir}" />
		<copy todir="${out-release-source-ospath}">
			<fileset dir=".">
				<exclude name="**/bin/**" />
				<exclude name="**/doc/**" />
				<exclude name="**/gen/**" />
				<exclude name="**/release/**" />
				<exclude name="**/tmp/**" />
				<exclude name="**/translations/**" />
				<exclude name="**/.svn" />
				<exclude name="**/build-private.properties" />
			</fileset>
		</copy>
		<zip destfile="${out-release-source-ospath}.zip">
			<zipfileset dir="${out-release-source-ospath}" prefix="${ant.project.name}-source-${version}"/>
		</zip>
		<delete dir="${out-release-source-ospath}"/>
		<!-- copy apk into releasedir for convenience -->
		<copy todir="${releasedir}">
			<fileset dir="${outdir}">
				 <filename name="${out-aligned-package-file}"/>
			</fileset>
		</copy>
    </target>
	
	<!-- ############ Convencience target ############## -->
	<target name="all" 
		depends="debug, javadoc" />
	
</project>

